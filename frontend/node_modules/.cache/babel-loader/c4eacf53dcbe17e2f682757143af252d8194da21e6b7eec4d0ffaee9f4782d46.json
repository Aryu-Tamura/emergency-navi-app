{"ast":null,"code":"var _jsxFileName = \"/Users/aryutamura/emergency-navi-app/frontend/src/context/SettingsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// =================================================================\n// 1. 新規ファイル: frontend/src/context/SettingsContext.js\n// =================================================================\nimport React, { createContext, useState, useEffect, useContext } from 'react';\n\n// Contextの作成\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsContext = /*#__PURE__*/createContext();\n\n// Contextを使用するためのカスタムフック\nexport const useSettings = () => {\n  _s();\n  return useContext(SettingsContext);\n};\n\n// Providerコンポーネント\n_s(useSettings, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s2();\n  const [settings, setSettings] = useState({\n    address: '',\n    phoneNumber: ''\n  });\n\n  // アプリ起動時にlocalStorageから設定を読み込む\n  useEffect(() => {\n    try {\n      const savedSettings = localStorage.getItem('emergency-navi-settings');\n      if (savedSettings) {\n        setSettings(JSON.parse(savedSettings));\n      }\n    } catch (error) {\n      console.error('Failed to load settings from localStorage', error);\n    }\n  }, []);\n\n  // 設定を更新し、localStorageに保存する関数\n  const updateSettings = newSettings => {\n    try {\n      setSettings(newSettings);\n      localStorage.setItem('emergency-navi-settings', JSON.stringify(newSettings));\n    } catch (error) {\n      console.error('Failed to save settings to localStorage', error);\n    }\n  };\n  const value = {\n    settings,\n    updateSettings\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s2(SettingsProvider, \"uzeSWiL/5ezUMBCM2NqflmSXlJk=\");\n_c = SettingsProvider;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","SettingsContext","useSettings","_s","SettingsProvider","children","_s2","settings","setSettings","address","phoneNumber","savedSettings","localStorage","getItem","JSON","parse","error","console","updateSettings","newSettings","setItem","stringify","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aryutamura/emergency-navi-app/frontend/src/context/SettingsContext.js"],"sourcesContent":["// =================================================================\n// 1. 新規ファイル: frontend/src/context/SettingsContext.js\n// =================================================================\nimport React, { createContext, useState, useEffect, useContext } from 'react';\n\n// Contextの作成\nconst SettingsContext = createContext();\n\n// Contextを使用するためのカスタムフック\nexport const useSettings = () => {\n    return useContext(SettingsContext);\n};\n\n// Providerコンポーネント\nexport const SettingsProvider = ({ children }) => {\n    const [settings, setSettings] = useState({\n        address: '',\n        phoneNumber: '',\n    });\n\n    // アプリ起動時にlocalStorageから設定を読み込む\n    useEffect(() => {\n        try {\n            const savedSettings = localStorage.getItem('emergency-navi-settings');\n            if (savedSettings) {\n                setSettings(JSON.parse(savedSettings));\n            }\n        } catch (error) {\n            console.error('Failed to load settings from localStorage', error);\n        }\n    }, []);\n\n    // 設定を更新し、localStorageに保存する関数\n    const updateSettings = (newSettings) => {\n        try {\n            setSettings(newSettings);\n            localStorage.setItem('emergency-navi-settings', JSON.stringify(newSettings));\n        } catch (error) {\n            console.error('Failed to save settings to localStorage', error);\n        }\n    };\n    \n    const value = {\n        settings,\n        updateSettings,\n    };\n\n    return (\n        <SettingsContext.Provider value={value}>\n            {children}\n        </SettingsContext.Provider>\n    );\n};"],"mappings":";;;AAAA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;;AAEvC;AACA,OAAO,MAAMO,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,OAAOL,UAAU,CAACG,eAAe,CAAC;AACtC,CAAC;;AAED;AAAAE,EAAA,CAJaD,WAAW;AAKxB,OAAO,MAAME,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC9C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC;IACrCa,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE;EACjB,CAAC,CAAC;;EAEF;EACAb,SAAS,CAAC,MAAM;IACZ,IAAI;MACA,MAAMc,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,yBAAyB,CAAC;MACrE,IAAIF,aAAa,EAAE;QACfH,WAAW,CAACM,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,CAAC;MAC1C;IACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACrE;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,cAAc,GAAIC,WAAW,IAAK;IACpC,IAAI;MACAX,WAAW,CAACW,WAAW,CAAC;MACxBP,YAAY,CAACQ,OAAO,CAAC,yBAAyB,EAAEN,IAAI,CAACO,SAAS,CAACF,WAAW,CAAC,CAAC;IAChF,CAAC,CAAC,OAAOH,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IACnE;EACJ,CAAC;EAED,MAAMM,KAAK,GAAG;IACVf,QAAQ;IACRW;EACJ,CAAC;EAED,oBACIlB,OAAA,CAACC,eAAe,CAACsB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAjB,QAAA,EAClCA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC,CAAC;AAACrB,GAAA,CAtCWF,gBAAgB;AAAAwB,EAAA,GAAhBxB,gBAAgB;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}